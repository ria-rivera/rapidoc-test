openapi: 3.0.3
servers:
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/Atgenomix/seqslab/0.3.0
info:
  version: 1.0.0
  title: ATGENOMIX SeqsLab Job and DataHub Management API
  # termsOfService: 'https://example.com/terms/'
  contact:
    email: chungtsai.su@atgenomix.com
    name: API support specialist
  license:
    name: Apache License Version 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
  x-logo:
    url: 'https://github.com/ria-rivera/logo/blob/main/atgenomix-logo.png?raw=true'
  description:
    $ref: ./info-description.md
externalDocs:
  description: Join the discussion at the ATGENOMIX User Community
  url: https://docs.atgenomix.com/docs/seqslab/welcome.html

tags:
  - name: JOB
    description: SeqsLab Job API
  - name: DATAHUB
    description: SeqsLab Data Hub API
  - name: LABEL
    description: SeqsLab Label Management API

paths:
  #SeqsLab Jobs
  /jobs/v1/service-info:
    $ref: '#/paths/~1ga4gh~1wes~1v1.0.1~1service-info'
  /jobs/v1/runs_expended:
    get:
      summary: List the workflow runs
      description: >-
        This list should be provided in a stable ordering.
        (The actual ordering is implementation dependent.)
        When paging through the list, the client should
        not make assumptions about live updates, but should assume the
        contents of the list reflect the workflow list at the moment
        that the first page is requested. To monitor a specific
        workflow run, use GetRunStatus or GetRunLog.
      operationId: ListExpendedRuns
      tags:
        - JOB
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: string
                items:
                  $ref: '#/components/schemas/RunExpendedListResponse'
        '400':
          description: The request is malformed.
          content:
            application/json:
              schema:
                type: string
                items:
                  $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: The request is unauthorized.
          content:
            application/json:
              schema:
                type: string
                items:
                  $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: The requester is not authorized to perform this action.
          content:
            application/json:
              schema:
                type: string
                items:
                  $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: An unexpected error occurred.
          content:
            application/json:
              schema:
                type: string
                items:
                  $ref: '#/components/schemas/ErrorResponse'
      parameters:
        - name: page_size
          description: >-
            OPTIONAL
            The preferred number of workflow runs to return in a page.
            If not provided, the implementation should use a default page size.
            The implementation must not return more items
            than `page_size`, but it may return fewer. Clients should
            not assume that if fewer than `page_size` items are
            returned that all items have been returned. The
            availability of additional pages is indicated by the value
            of `next_page_token` in the response.
          in: query
          required: false
          schema:
            type: integer
            format: int64
        - name: page_token
          description: >-
            OPTIONAL
            Token to use to indicate where to start getting results. If unspecified, return the first
            page of results.
          in: query
          required: false
          schema:
            type: string
      security:
        - BEARER: []

  /jobs/v1/runs/validate:
    post:
      summary: Validate a workflow
      description: >-
        This endpoint returns a workflow_params for the given workflow run.


        The `workflow_attachment` array may be used to upload files
        that are required to execute the workflow, including the primary
        workflow, tools imported by the workflow, other files
        referenced by the workflow, or files which are part of the
        input.  The implementation should stage these files to a
        temporary directory and execute the workflow from there.
        These parts must have a Content-Disposition header with a
        "filename" provided for each part.  Filenames may include
        subdirectories, but must not include references to parent
        directories with '..' -- implementations should guard against
        maliciously constructed filenames.


        The `workflow_url` is either an absolute URL to a workflow
        file that is accessible by the WES endpoint, or a relative URL
        corresponding to one of the files attached using
        `workflow_attachment`.


        The `workflow_type` is the type of workflow language and
        must be "CWL" or "WDL" currently (or another alternative
        supported by this WES instance).


        The `workflow_type_version` is the version of the workflow language
        submitted and must be one supported by this WES instance.


        See the `RunRequest` documentation for details about other fields.
      operationId: ValidateWorkflow
      tags:
        - JOB
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: string
                items:
                  $ref: '#/components/schemas/WorkflowMeta'
                example: '{ inputs: \"{ input_r1: File, input_r2: File, ref: String, num_threads: integer}\", call_graph: \"digraph alignmentRun {  #rankdir=LR;  compound=true;  # Links  SCATTER_0_VARIABLE_idx -> CALL_Bwa  CALL_Bwa -> CALL_Gatk  # Nodes  subgraph cluster_0 {    style="filled,solid";    fillcolor=white;    SCATTER_0_VARIABLE_idx [shape="hexagon" label="Start"]    CALL_Bwa [label="call BWA"]    CALL_Gatk [label="call GATK"]  }}"'
        '400':
          description: The request is malformed.
          content:
            application/json:
              schema:
                type: string
                items:
                  $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: The request is unauthorized.
          content:
            application/json:
              schema:
                type: string
                items:
                  $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: The requester is not authorized to perform this action.
          content:
            application/json:
              schema:
                type: string
                items:
                  $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: An unexpected error occurred.
          content:
            application/json:
              schema:
                type: string
                items:
                  $ref: '#/components/schemas/ErrorResponse'
      parameters: []
      requestBody:
        content:
          multipart/form-data:
            encoding: {}
            schema:
              type: object
              properties:
                workflow_type:
                  type: string
                workflow_type_version:
                  type: string
                tags:
                  type: string
                  format: application/json
                workflow_engine_parameters:
                  type: string
                  format: application/json
                workflow_url:
                  type: string
                workflow_attachement:
                  type: array
                  items:
                    type: string
                    format: binary
                  description: ''
        required: false
      security:
        - BEARER: []

  /jobs/v1/runs:
    $ref: '#/paths/~1ga4gh~1wes~1v1.0.1~1runs'
  "/jobs/v1/runs/{run_id}":
    $ref: '#/paths/~1ga4gh~1wes~1v1.0.1~1runs~1%7Brun_id%7D'
  "/jobs/v1/runs/{run_id}/status":
    $ref: '#/paths/~1ga4gh~1wes~1v1.0.1~1runs~1%7Brun_id%7D~1status'
  /jobs/v1/toolClasses:
    $ref: '#/paths/~1ga4gh~1trs~1v2.0.1~1toolClasses'
  /jobs/v1/tools:
    $ref: '#/paths/~1ga4gh~1trs~1v2.0.1~1tools'

  /jobs/v1/tools/{id}:
    $ref: '#/paths/~1ga4gh~1trs~1v2.0.1~1tools~1%7Bid%7D'
  /jobs/v1/tools/{id}/versions:
    $ref: '#/paths/~1ga4gh~1trs~1v2.0.1~1tools~1%7Bid%7D~1versions'
  /jobs/v1/tools/{id}/versions/{version_id}:
    $ref: '#/paths/~1ga4gh~1trs~1v2.0.1~1tools~1%7Bid%7D~1versions~1%7Bversion_id%7D'
  /jobs/v1/tools/{id}/versions/{version_id}/{type}/descriptor:
    $ref: '#/paths/~1ga4gh~1trs~1v2.0.1~1tools~1%7Bid%7D~1versions~1%7Bversion_id%7D~1%7Btype%7D~1descriptor'
  /jobs/v1/tools/{id}/versions/{version_id}/{type}/descriptor/{relative_path}:
    $ref: '#/paths/~1ga4gh~1trs~1v2.0.1~1tools~1%7Bid%7D~1versions~1%7Bversion_id%7D~1%7Btype%7D~1descriptor~1%7Brelative_path%7D'
  /jobs/v1/tools/{id}/versions/{version_id}/{type}/files:
    $ref: '#/paths/~1ga4gh~1trs~1v2.0.1~1tools~1%7Bid%7D~1versions~1%7Bversion_id%7D~1%7Btype%7D~1files'
  /jobs/v1/tools/{id}/versions/{version_id}/{type}/tests:
    $ref: '#/paths/~1ga4gh~1trs~1v2.0.1~1tools~1%7Bid%7D~1versions~1%7Bversion_id%7D~1%7Btype%7D~1tests'
  /jobs/v1/tools/{id}/versions/{version_id}/containerfile:
    $ref: '#/paths/~1ga4gh~1trs~1v2.0.1~1tools~1%7Bid%7D~1versions~1%7Bversion_id%7D~1containerfile'
  /datahub/v1/objects_expended:
    get:
      summary: List the DataHub objects
      description: >-
        This list should be provided in a stable ordering.
        (The actual ordering is implementation dependent.)
        When paging through the list, the client should
        not make assumptions about live updates, but should assume the
        contents of the list reflect the DataHub list at the moment
        that the first page is requested.
      operationId: ListExpendedObjects
      tags:
        - DATAHUB
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: string
                items:
                  $ref: '#/components/schemas/ObjectExpendedListResponse'
        '400':
          description: The request is malformed.
          content:
            application/json:
              schema:
                type: string
                items:
                  $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: The request is unauthorized.
          content:
            application/json:
              schema:
                type: string
                items:
                  $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: The requester is not authorized to perform this action.
          content:
            application/json:
              schema:
                type: string
                items:
                  $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: An unexpected error occurred.
          content:
            application/json:
              schema:
                type: string
                items:
                  $ref: '#/components/schemas/ErrorResponse'
      parameters:
        - name: page_size
          description: >-
            OPTIONAL
            The preferred number of DataHub objects to return in a page.
            If not provided, the implementation should use a default page size.
            The implementation must not return more items
            than `page_size`, but it may return fewer. Clients should
            not assume that if fewer than `page_size` items are
            returned that all items have been returned.  The
            availability of additional pages is indicated by the value
            of `next_page_token` in the response.
          in: query
          required: false
          schema:
            type: integer
            format: int64
        - name: page_token
          description: >-
            OPTIONAL
            Token to use to indicate where to start getting results. If unspecified, return the first
            page of results.
          in: query
          required: false
          schema:
            type: string
      security:
        - BEARER: []

  '/datahub/v1/objects/{object_id}':
    $ref: '#/paths/~1ga4gh~1drs~1v1.1.0~1objects~1%7Bobject_id%7D'
  '/datahub/v1/objects/{object_id}/access/{access_id}':
    $ref: '#/paths/~1ga4gh~1drs~1v1.1.0~1objects~1%7Bobject_id%7D~1access~1%7Baccess_id%7D'
  /datahub/v1/reads/service-info:
    $ref: '#/paths/~1ga4gh~1htsget~1v1.4.1~1reads~1service-info'
  '/datahub/v1/reads/{id}':
    $ref: '#/paths/~1ga4gh~1htsget~1v1.4.1~1reads~1%7Bid%7D'
  '/datahub/v1/reads/data/{id}':
    $ref: '#/paths/~1ga4gh~1htsget~1v1.4.1~1reads~1data~1%7Bid%7D'
  /datahub/v1/variants/service-info:
    $ref: '#/paths/~1ga4gh~1htsget~1v1.4.1~1variants~1service-info'
  '/datahub/v1/variants/{id}':
    $ref: '#/paths/~1ga4gh~1htsget~1v1.4.1~1variants~1%7Bid%7D'
  '/datahub/v1/variants/data/{id}':
    $ref: '#/paths/~1ga4gh~1htsget~1v1.4.1~1variants~1data~1%7Bid%7D'
  /datahub/v1/file-bytes:
    $ref: '#/paths/~1ga4gh~1htsget~1v1.4.1~1file-bytes'

  #GA4GH WES
  /ga4gh/wes/v1.0.1/service-info:
    get:
      summary: Get information about the SeqsLab Job and Data Hub Services
      description: |-
        May include information related (but not limited to) the workflow descriptor formats, versions supported, the WES API versions supported, the TRS API versions supported, and information about general service availability.
      operationId: GetServiceInfo
      tags:
        - JOB
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: string
                example: '{ "id": "com.atgenomix.seqslab",  "name": "SeqsLab Workflow Execution and Tool Registry Service",  "type": {    "group": "com.atgenomix",    "artifact": "beacon",    "version": "1.0.0"  },  "description": "This service provides workflow management on Microsoft Azure",  "organization": {    "name": "ATGENOMIX",    "url": "https://www.atgenomix.com"  },  "contactUrl": "mailto:support@atgenomix.com",  "documentationUrl": "https://docs.atgenomix.com",  "createdAt": "2020-12-01T00:00:00Z",  "updatedAt": "2020-12-31T12:58:19Z",  "environment": "Azure",  "version": "1.0.0",  "workflow_type_versions": {    "additionalProp1": {      "workflow_type_version": [        "WDL"      ]    }  },  "supported_wes_versions": [    "1.0.0"  ],  "supported_filesystem_protocols": [    "http", "https", "s3", "gs", "adfss"  ],  "workflow_engine_versions": {    "1.0.0"  },  "default_workflow_engine_parameters": [    {      "name": "string",      "type": "string",      "default_value": "string"    }  ],  "system_state_counts": {    "additionalProp1": 0,    "additionalProp2": 0,  },  "auth_instructions_url": "OAuth2 bearer token",  "tags": {    "WES": "v1.0.1",    "TRS": "v2.0.1",  }}'
                items:
                  $ref: '#/components/schemas/ServiceInfo'
        '400':
          description: The request is malformed.
          content:
            application/json:
              schema:
                type: string
                example: '{ "msg": "The request is malformed", "status_code": 400 }'
                items:
                  $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: The request is unauthorized.
          content:
            application/json:
              schema:
                type: string
                example: '{ "msg": "The request is unauthorized", "status_code": 401 }'
                items:
                  $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: The requester is not authorized to perform this action.
          content:
            application/json:
              schema:
                type: string
                example: '{ "msg": "The requester is not authorized to perform this action", "status_code": 403 }'
                items:
                  $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: An unexpected error occurred.
          content:
            application/json:
              schema:
                type: string
                example: '{ "msg": "An unexpected error occurred", "status_code": 500 }'
                items:
                 $ref: '#/components/schemas/ErrorResponse'
      security:
        - BEARER: []
  /ga4gh/wes/v1.0.1/runs:
    get:
      summary: List the workflow runs
      description: >-
        This list should be provided in a stable ordering.
        (The actual ordering is implementation dependent.)
        When paging through the list, the client should
        not make assumptions about live updates, but should assume the
        contents of the list reflect the workflow list at the moment
        that the first page is requested. To monitor a specific
        workflow run, use GetRunStatus or GetRunLog.
      operationId: ListRuns
      tags:
        - JOB
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: string
                items:
                  $ref: '#/components/schemas/RunListResponse'
        '400':
          description: The request is malformed.
          content:
            application/json:
              schema:
                type: string
                items:
                  $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: The request is unauthorized.
          content:
            application/json:
              schema:
                type: string
                items:
                  $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: The requester is not authorized to perform this action.
          content:
            application/json:
              schema:
                type: string
                items:
                  $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: An unexpected error occurred.
          content:
            application/json:
              schema:
                type: string
                items:
                  $ref: '#/components/schemas/ErrorResponse'
      parameters:
        - name: page_size
          description: >-
            OPTIONAL
            The preferred number of workflow runs to return in a page.
            If not provided, the implementation should use a default page size.
            The implementation must not return more items
            than `page_size`, but it may return fewer. Clients should
            not assume that if fewer than `page_size` items are
            returned that all items have been returned. The
            availability of additional pages is indicated by the value
            of `next_page_token` in the response.
          in: query
          required: false
          schema:
            type: integer
            format: int64
        - name: page_token
          description: >-
            OPTIONAL
            Token to use to indicate where to start getting results. If unspecified, return the first
            page of results.
          in: query
          required: false
          schema:
            type: string
    post:
      summary: Run a workflow
      description: >-
        This endpoint creates a new workflow run and
        returns a `RunId` to monitor its progress.


        The `workflow_attachment` array may be used to upload files
        that are required to execute the workflow, including the primary
        workflow, tools imported by the workflow, other files
        referenced by the workflow, or files which are part of the
        input. The implementation should stage these files to a
        temporary directory and execute the workflow from there.
        These parts must have a Content-Disposition header with a
        "filename" provided for each part. Filenames may include
        subdirectories, but must not include references to parent
        directories with '..' -- implementations should guard against
        maliciously constructed filenames.


        The `workflow_url` is either an absolute URL to a workflow
        file that is accessible by the WES endpoint, or a relative URL
        corresponding to one of the files attached using
        `workflow_attachment`.


        The `workflow_params` JSON object specifies input parameters,
        such as input files. The exact format of the JSON object
        depends on the conventions of the workflow language being
        used. Input files should either be absolute URLs, or relative
        URLs corresponding to files uploaded using
        `workflow_attachment`. The WES endpoint must understand and
        be able to access URLs supplied in the input. This is
        implementation specific.


        The `workflow_type` is the type of workflow language and
        must be "CWL" or "WDL" currently (or another alternative
        supported by this WES instance).


        The `workflow_type_version` is the version of the workflow language
        submitted and must be one supported by this WES instance.


        See the `RunRequest` documentation for details about other fields.
      operationId: RunWorkflow
      tags:
        - JOB
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: string
                items:
                  $ref: '#/components/schemas/RunId'
        '400':
          description: The request is malformed.
          content:
            application/json:
              schema:
                type: string
                items:
                  $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: The request is unauthorized.
          content:
            application/json:
              schema:
                type: string
                items:
                  $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: The requester is not authorized to perform this action.
          content:
            application/json:
              schema:
                type: string
                items:
                  $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: An unexpected error occurred.
          content:
            application/json:
              schema:
                type: string
                items:
                  $ref: '#/components/schemas/ErrorResponse'
      parameters: []
      requestBody:
        content:
          multipart/form-data:
            encoding: {}
            schema:
              type: object
              properties:
                workflow_params:
                  type: string
                  format: application/json
                workflow_type:
                  type: string
                workflow_type_version:
                  type: string
                tags:
                  type: string
                  format: application/json
                workflow_engine_parameters:
                  type: string
                  format: application/json
                workflow_url:
                  type: string
                workflow_attachement:
                  type: array
                  items:
                    type: string
                    format: binary
                  description: ''
        required: false
      security:
        - BEARER: []
  "/ga4gh/wes/v1.0.1/runs/{run_id}":
    get:
      summary: Get detailed info about a workflow run
      description: >-
        This endpoint provides detailed information about a given workflow run.
        The returned result has information about the outputs produced by this workflow
        (if available), a log object which allows the stderr and stdout to be retrieved,
        a log array so stderr/stdout for individual tasks can be retrieved,
        and the overall state of the workflow run (e.g. RUNNING, see the State section).
      operationId: GetRunLog
      tags:
        - JOB
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: string
                items:
                  $ref: '#/components/schemas/RunLog'
                example: '{  "run_id": "aaa_12345",  "request": {    "workflow_params": {      "input_r1": "/mnt/data/fastq/sample1.r1.fq.gz",      "input_r2": "/mnt/data/fastq/sample1.r2.fq.gz",      "output_bam": "/mnt/data/bam/sample1.bam",      "output_vcf": "/mnt/data/vcf/sample1.vcf.gz"    },    "workflow_type": "WDL",    "workflow_type_version": "v1.0",    "tags": {      "property1" : "BRCA/Stage4/tissue",      "property2" : "IRB12345/20201131",    },    "workflow_engine_parameters": {      "parallelization": "by128MB",      "cloud_provider": "AZURE.US_WEST2"    },    "workflow_url": "string"  },  "state": "RUNNING",  "run_log": {    "name": "Somatic Variant Calling by Mutect2",    "cmd": [      ""    ],    "start_time": "2020/12/01 01:00:00AM",    "end_time": "2020/12/01 03:12:34AM",    "stdout": "Job Completed",    "stderr": "",    "exit_code": 0  },  "task_logs": [    {      "name": "BWA",      "cmd": [        "bwa mem ..."      ],      "start_time": "2020/12/01 01:00:00AM",      "end_time": "2020/12/01 01:52:34AM",   "stdout": "Task Completed",   "stderr": "",   "exit_code": 0  },  {      "name": "Mutect2",      "cmd": [        "java -jar mutect2.jar ..."      ],      "start_time": "2020/12/01 01:57:12AM",      "end_time": "2020/12/01 03:52:34AM",    "stdout": "Task Completed",   "stderr": "",   "exit_code": 0  }  ],  "outputs": { }}'
        '401':
          description: The request is unauthorized.
          content:
            application/json:
              schema:
                type: string
                items:
                  $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: The requested workflow run not found.
          content:
            application/json:
              schema:
                type: string
                items:
                 $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: The requester is not authorized to perform this action.
          content:
            application/json:
              schema:
                type: string
                items:
                  $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: An unexpected error occurred.
          content:
            application/json:
              schema:
                type: string
                items:
                  $ref: '#/components/schemas/ErrorResponse'
      parameters:
        - name: run_id
          in: path
          required: true
          schema:
            type: string
      security:
        - BEARER: []
  "/ga4gh/wes/v1.0.1/runs/{run_id}/cancel":
    post:
      summary: (Unsupported) Cancel a running workflow
      description: (Unsupported) Cancel a workflow. In this version, it always returns 500.
      operationId: CancelRun
      tags:
        - JOB
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: string
                items:
                  $ref: '#/components/schemas/RunId'
        '401':
          description: The request is unauthorized.
          content:
            application/json:
              schema:
                type: string
                items:
                  $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: The requested workflow run wasn't found.
          content:
            application/json:
              schema:
                type: string
                items:
                  $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: The requester is not authorized to perform this action.
          content:
            application/json:
              schema:
                type: string
                items:
                  $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: An unexpected error occurred.
          content:
            application/json:
              schema:
                type: string
                items:
                  $ref: '#/components/schemas/ErrorResponse'
      parameters:
        - name: run_id
          in: path
          required: true
          schema:
            type: string
      security:
        - BEARER: []
  "/ga4gh/wes/v1.0.1/runs/{run_id}/status":
    get:
      summary: Get quick status info about a workflow run
      description: >-
        This provides an abbreviated (and likely fast depending on implementation)
        status of the running workflow, returning a simple result with the
        overall state of the workflow run (e.g. RUNNING, see the State section).
      operationId: GetRunStatus
      tags:
        - JOB
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: string
                items:
                  $ref: '#/components/schemas/RunStatus'
        '401':
          description: The request is unauthorized.
          content:
            application/json:
              schema:
                type: string
                items:
                  $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: The requested workflow run wasn't found.
          content:
            application/json:
              schema:
                type: string
                items:
                  $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: The requester is not authorized to perform this action.
          content:
            application/json:
              schema:
                type: string
                items:
                  $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: An unexpected error occurred.
          content:
            application/json:
              schema:
                type: string
                items:
                  $ref: '#/components/schemas/ErrorResponse'
      parameters:
        - name: run_id
          in: path
          required: true
          schema:
            type: string
      security:
        - BEARER: []

  #GA4GH TRS
  "/ga4gh/trs/v2.0.1/tools/{id}":
    get:
      summary: List one specific tool, acts as an anchor for self references
      operationId: toolsIdGet
      description: This endpoint returns one specific tool (which has ToolVersions
        nested inside it).
      tags:
        - JOB
      parameters:
        - name: id
          in: path
          required: true
          description: A unique identifier of the tool, scoped to this registry, for
            example `123456`.
          schema:
            type: string
      responses:
        "200":
          description: A tool.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Tool"
            text/plain:
              schema:
                $ref: "#/components/schemas/Tool"
        "404":
          description: The tool can not be found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            text/plain:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - BEARER: []
  "/ga4gh/trs/v2.0.1/tools/{id}/versions":
    get:
      summary: List versions of a tool
      operationId: toolsIdVersionsGet
      description: Returns all versions of the specified tool.
      tags:
        - JOB
      parameters:
        - name: id
          in: path
          required: true
          description: A unique identifier of the tool, scoped to this registry, for
            example `123456`.
          schema:
            type: string
      responses:
        "200":
          description: An array of tool versions.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ToolVersion"
            text/plain:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ToolVersion"
      security:
        - BEARER: []
  "/ga4gh/trs/v2.0.1/tools/{id}/versions/{version_id}":
    get:
      summary: List one specific tool version, acts as an anchor for self references
      operationId: toolsIdVersionsVersionIdGet
      description: This endpoint returns one specific tool version.
      tags:
        - JOB
      parameters:
        - name: id
          in: path
          required: true
          description: A unique identifier of the tool, scoped to this registry, for
            example `123456`.
          schema:
            type: string
        - name: version_id
          in: path
          required: true
          description: An identifier of the tool version, scoped to this registry, for
            example `v1`. We recommend that versions use semantic versioning
            https://semver.org/spec/v2.0.0.html  (For example, `1.0.0` instead
            of `develop`).
          schema:
            type: string
      responses:
        "200":
          description: A tool version.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ToolVersion"
            text/plain:
              schema:
                $ref: "#/components/schemas/ToolVersion"
        "404":
          description: The tool can not be found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            text/plain:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - BEARER: []
  /ga4gh/trs/v2.0.1/tools:
    get:
      summary: List all tools
      operationId: toolsGet
      description: >
        This endpoint returns all tools available or a filtered subset using
        metadata query parameters.
      tags:
        - JOB
      parameters:
        - name: id
          in: query
          description: A unique identifier of the tool, scoped to this registry, for
            example `123456`.
          schema:
            type: string
        - name: alias
          in: query
          description: >-
            Support for this parameter is optional for tool registries that
            support aliases.

            If provided will only return entries with the given alias.
          schema:
            type: string
        - name: toolClass
          in: query
          description: Filter tools by the name of the subclass (#/definitions/ToolClass)
          schema:
            type: string
        - name: descriptorType
          in: query
          description: Filter tools by the name of the descriptor type
            (#/definitions/DescriptorType)
          schema:
            type: string
        - name: registry
          in: query
          description: The image registry that contains the image.
          schema:
            type: string
        - name: organization
          in: query
          description: The organization in the registry that published the image.
          schema:
            type: string
        - name: name
          in: query
          description: The name of the image.
          schema:
            type: string
        - name: toolname
          in: query
          description: The name of the tool.
          schema:
            type: string
        - name: description
          in: query
          description: The description of the tool.
          schema:
            type: string
        - name: author
          in: query
          description: The author of the tool (TODO a thought occurs, are we assuming that
            the author of the CWL and the image are the same?).
          schema:
            type: string
        - name: checker
          in: query
          description: Return only checker workflows.
          schema:
            type: boolean
        - $ref: "#/components/parameters/offset"
        - $ref: "#/components/parameters/limit"
      responses:
        "200":
          description: An array of Tools that match the filter.
          headers:
            next_page:
              description: A URL that can be used to reach the next page based on the current
                offset and page record limit.
              schema:
                type: string
            last_page:
              description: A URL that can be used to reach the last page based on the current
                page record limit.
              schema:
                type: string
            self_link:
              description: A URL that can be used to return to the current page later.
              schema:
                type: string
            current_offset:
              description: The current start index of the paging used for this result.
              schema:
                type: string
            current_limit:
              description: The current page record limit used for this result.
              schema:
                type: integer
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Tool"
            text/plain:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Tool"
      security:
        - BEARER: []
    post:
      summary: Register a new tool
      operationId: ToolPost
      description: Returns the tool ID by registering a new tool on SeqsLab.
      tags:
        - JOB
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: string
                items:
                  $ref: '#/components/schemas/Tool'
        '400':
          description: The request is malformed.
          content:
            application/json:
              schema:
                type: string
                items:
                  $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: The request is unauthorized.
          content:
            application/json:
              schema:
                type: string
                items:
                  $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: The requester is not authorized to perform this action.
          content:
            application/json:
              schema:
                type: string
                items:
                  $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: An unexpected error occurred.
          content:
            application/json:
              schema:
                type: string
                items:
                  $ref: '#/components/schemas/ErrorResponse'
      parameters: []
      requestBody:
        content:
          multipart/form-data:
            encoding: {}
            schema:
              type: object
              properties:
                workflow_body:
                  type: string
                  description: The workflow language for this tool.
                containerfile_url:
                  type: string
                  description: The URL for the matched container image.
                checker_body:
                  type: string
                  description: The testing script for this tool.
                version:
                  type: string
                  description: The version id for this tool.
                id:
                  type: string
                  example: 123456
                  description: A unique identifier of the tool, scoped to this registry.
                aliases:
                  type: array
                  items:
                    type: string
                    example:
                      - 630d31c3-381e-488d-b639-ce5d047a0142
                      - dockstore.org:630d31c3-381e-488d-b639-ce5d047a0142
                      - bio.tools:630d31c3-381e-488d-b639-ce5d047a0142
                  description: >-
                    Support for this parameter is optional for tool registries that
                    support aliases.

                    A list of strings that can be used to identify this tool which could be straight up URLs.

                    This can be used to expose alternative ids (such as GUIDs) for a tool

                    for registries. Can be used to match tools across registries.
                organization:
                  type: string
                  description: The organization that published the image.
                name:
                  type: string
                  description: The name of the tool.
                toolclass:
                  $ref: "#/components/schemas/ToolClass"
                description:
                  type: string
                  description: The description of the tool.
                meta_version:
                  type: string
                  description: The version of this tool in the registry. Iterates when fields like
                    the description, author, etc. are updated.
        required: false
      security:
        - BEARER: []
  "/ga4gh/trs/v2.0.1/tools/{id}/versions/{version_id}/{type}/descriptor":
    get:
      summary: Get the tool descriptor for the specified tool
      operationId: toolsIdVersionsVersionIdTypeDescriptorGet
      description: Returns the descriptor for the specified tool (examples include
        CWL, WDL, Nextflow, or Galaxy documents).
      tags:
        - JOB
      parameters:
        - name: type
          required: true
          in: path
          description: The output type of the descriptor. Plain types return the bare
            descriptor while the "non-plain" types return a descriptor wrapped
            with metadata. Allowable values include "CWL", "WDL", "NFL",
            "GALAXY", "PLAIN_CWL", "PLAIN_WDL", "PLAIN_NFL", "PLAIN_GALAXY".
          schema:
            type: string
        - name: id
          in: path
          description: A unique identifier of the tool, scoped to this registry, for
            example `123456`.
          required: true
          schema:
            type: string
        - name: version_id
          in: path
          required: true
          description: An identifier of the tool version, scoped to this registry, for
            example `v1`.
          schema:
            type: string
      responses:
        "200":
          description: The tool descriptor.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FileWrapper"
            text/plain:
              schema:
                $ref: "#/components/schemas/FileWrapper"
        "404":
          description: The tool descriptor cannot be found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            text/plain:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - BEARER: []
  "/ga4gh/trs/v2.0.1/tools/{id}/versions/{version_id}/{type}/descriptor/{relative_path}":
    get:
      summary: Get additional tool descriptor files relative to the main file
      operationId: toolsIdVersionsVersionIdTypeDescriptorRelativePathGet
      description: Descriptors can often include imports that refer to additional
        descriptors. This returns additional descriptors for the specified tool
        in the same or other directories that can be reached as a relative path.
        This endpoint can be useful for workflow engine implementations like
        cwltool to programmatically download all the descriptors for a tool and
        run it. This can optionally include other files described with
        FileWrappers such as test parameters and containerfiles.
      tags:
        - JOB
      parameters:
        - name: type
          in: path
          required: true
          description: The output type of the descriptor. If not specified, it is up to
            the underlying implementation to determine which output type to
            return. Plain types return the bare descriptor while the "non-plain"
            types return a descriptor wrapped with metadata. Allowable values
            are "CWL", "WDL", "NFL", "GALAXY", "PLAIN_CWL", "PLAIN_WDL",
            "PLAIN_NFL", "PLAIN_GALAXY".
          schema:
            type: string
        - name: id
          in: path
          description: A unique identifier of the tool, scoped to this registry, for
            example `123456`.
          required: true
          schema:
            type: string
        - name: version_id
          in: path
          required: true
          description: An identifier of the tool version for this particular tool
            registry, for example `v1`.
          schema:
            type: string
        - name: relative_path
          in: path
          required: true
          description: A relative path to the additional file (same directory or
            subdirectories), for example 'foo.cwl' would return a 'foo.cwl' from
            the same directory as the main descriptor. 'nestedDirectory/foo.cwl'
            would return the file  from a nested subdirectory. Unencoded paths
            such 'sampleDirectory/foo.cwl' should also be allowed.
          schema:
            type: string
            pattern: .+
      responses:
        "200":
          description: The tool descriptor.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FileWrapper"
            text/plain:
              schema:
                $ref: "#/components/schemas/FileWrapper"
        "404":
          description: The tool can not be output in the specified type.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            text/plain:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - BEARER: []
  "/ga4gh/trs/v2.0.1/tools/{id}/versions/{version_id}/{type}/tests":
    get:
      summary: Get a list of test JSONs
      operationId: toolsIdVersionsVersionIdTypeTestsGet
      description: Get a list of test JSONs (these allow you to execute the tool
        successfully) suitable for use with this descriptor type.
      tags:
        - JOB
      parameters:
        - name: type
          required: true
          in: path
          description: The type of the underlying descriptor. Allowable values include
            "CWL", "WDL", "NFL", "GALAXY", "PLAIN_CWL", "PLAIN_WDL",
            "PLAIN_NFL", "PLAIN_GALAXY". For example, "CWL" would return a list
            of ToolTests objects while "PLAIN_CWL" would return a bare JSON list
            with the content of the tests.
          schema:
            type: string
        - name: id
          in: path
          description: A unique identifier of the tool, scoped to this registry, for
            example `123456`.
          required: true
          schema:
            type: string
        - name: version_id
          in: path
          required: true
          description: An identifier of the tool version for this particular tool
            registry, for example `v1`.
          schema:
            type: string
      responses:
        "200":
          description: The tool test JSON response.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/FileWrapper"
            text/plain:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/FileWrapper"
        "404":
          description: The tool cannot be output in the specified type.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            text/plain:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - BEARER: []
  "/ga4gh/trs/v2.0.1/tools/{id}/versions/{version_id}/{type}/files":
    get:
      summary: Get a list of objects that contain the relative path and file type
      description: Get a list of objects that contain the relative path and file type.
        The descriptors are intended for use with the
        /tools/{id}/versions/{version_id}/{type}/descriptor/{relative_path}
        endpoint. Returns a zip file of all files when format=zip is specified.
      operationId: toolsIdVersionsVersionIdTypeFilesGet
      tags:
        - JOB
      parameters:
        - name: type
          required: true
          in: path
          description: The output type of the descriptor. Examples of allowable values are
            "CWL", "WDL", "NFL", "GALAXY".
          schema:
            type: string
        - name: id
          in: path
          description: A unique identifier of the tool, scoped to this registry, for
            example `123456`.
          required: true
          schema:
            type: string
        - name: version_id
          in: path
          required: true
          description: An identifier of the tool version for this particular tool
            registry, for example `v1`.
          schema:
            type: string
        - name: format
          in: query
          required: false
          description: Returns a zip file of all files when format=zip is specified.
          schema:
            type: string
            enum:
              - zip
      responses:
        "200":
          description: The array of File JSON responses.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ToolFile"
            application/zip:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ToolFile"
        "404":
          description: The tool cannot be output in the specified type.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            application/zip:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - BEARER: []
  "/ga4gh/trs/v2.0.1/tools/{id}/versions/{version_id}/containerfile":
    get:
      summary: Get the container specification(s) for the specified image.
      operationId: toolsIdVersionsVersionIdContainerfileGet
      description: Returns the container specifications(s) for the specified image.
        For example, a CWL CommandlineTool can be associated with one
        specification for a container, a CWL Workflow can be associated with
        multiple specifications for containers.
      tags:
        - JOB
      parameters:
        - name: id
          in: path
          description: A unique identifier of the tool, scoped to this registry, for
            example `123456`.
          required: true
          schema:
            type: string
        - name: version_id
          in: path
          required: true
          description: An identifier of the tool version for this particular tool
            registry, for example `v1`.
          schema:
            type: string
      responses:
        "200":
          description: The tool payload.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/FileWrapper"
            text/plain:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/FileWrapper"
        "404":
          description: There are no container specifications for this tool.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            text/plain:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - BEARER: []
  /ga4gh/trs/v2.0.1/toolClasses:
    get:
      summary: List all tool types
      operationId: toolClassesGet
      description: |
        This endpoint returns all tool-classes available.
      tags:
        - JOB
      responses:
        "200":
          description: A list of potential tool classes.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ToolClass"
            text/plain:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ToolClass"
      security:
        - BEARER: []

  #DRS
  '/ga4gh/drs/v1.1.0/objects/{object_id}':
    get:
      summary: Get info about a `DrsObject`
      description: >-
        Returns object metadata, and a list of access methods that can be used to fetch object bytes.
      operationId: GetObject
      responses:
        '200':
          description: The `DrsObject` was found successfully.
          content:
            application/json:
              schema:
                type: string
                items:
                  $ref: '#/components/schemas/DrsObject'
        '202':
          description: >
            The operation is delayed and will continue asynchronously.
            The client should retry this same request after the delay specified by Retry-After header.
          headers:
            Retry-After:
              description: >
                Delay in seconds. The client should retry this same request after waiting for this duration.
                To simplify client response processing, this must be an integral relative time in seconds.
                This value SHOULD represent the minimum duration the client should wait before attempting
                the operation again with a reasonable expectation of success. When it is not feasible
                for the server to determine the actual expected delay, the server may return a
                brief, fixed value instead.
              schema:
                type: integer
                format: int64
        '400':
          description: The request is malformed.
          content:
            application/json:
              schema:
                type: string
                items:
                  $ref: '#/components/schemas/Error'
        '401':
          description: The request is unauthorized.
          content:
            application/json:
              schema:
                type: string
                items:
                  $ref: '#/components/schemas/Error'
        '403':
          description: The requester is not authorized to perform this action.
          content:
            application/json:
              schema:
                type: string
                items:
                  $ref: '#/components/schemas/Error'
        '404':
          description: The requested `DrsObject` wasn't found
          content:
            application/json:
              schema:
                type: string
                items:
                  $ref: '#/components/schemas/Error'
        '500':
          description: An unexpected error occurred.
          content:
            application/json:
              schema:
                type: string
                items:
                  $ref: '#/components/schemas/Error'
      parameters:
        - name: object_id
          in: path
          required: true
          schema:
            type: string
        - in: query
          name: expand
          schema:
            type: boolean
            default: false
          description: >-
            If false and the object_id refers to a bundle, then the ContentsObject array
            contains only those objects directly contained in the bundle. That is, if the
            bundle contains other bundles, those other bundles are not recursively
            included in the result.

            If true and the object_id refers to a bundle, then the entire set of objects
            in the bundle is expanded. That is, if the bundle contains aother bundles,
            then those other bundles are recursively expanded and included in the result.
            Recursion continues through the entire sub-tree of the bundle.

            If the object_id refers to a blob, then the query parameter is ignored.
      tags:
        - DATAHUB
      security:
        - BEARER: []
  '/ga4gh/drs/v1.1.0/objects/{object_id}/access/{access_id}':
    get:
      summary: Get a URL for fetching bytes
      description: >-
        Returns a URL that can be used to fetch the bytes of a `DrsObject`.


        This method only needs to be called when using an `AccessMethod` that contains an `access_id`
        (e.g., for servers that use signed URLs for fetching object bytes).
      operationId: GetAccessURL
      responses:
        '200':
          description: The access URL was found successfully.
          content:
            application/json:
              schema:
                type: string
                items:
                  $ref: '#/components/schemas/AccessURL'
        '202':
          description: >
            The operation is delayed and will continue asynchronously.
            The client should retry this same request after the delay specified by Retry-After header.
          headers:
            Retry-After:
              description: >
                Delay in seconds. The client should retry this same request after waiting for this duration.
                To simplify client response processing, this must be an integral relative time in seconds.
                This value SHOULD represent the minimum duration the client should wait before attempting
                the operation again with a reasonable expectation of success. When it is not feasible
                for the server to determine the actual expected delay, the server may return a
                brief, fixed value instead.
              schema:
                type: integer
                format: int64
        '400':
          description: The request is malformed.
          content:
            application/json:
              schema:
                type: string
                items:
                  $ref: '#/components/schemas/Error'
        '401':
          description: The request is unauthorized.
          content:
            application/json:
              schema:
                type: string
                items:
                  $ref: '#/components/schemas/Error'
        '404':
          description: The requested access URL wasn't found.
          content:
            application/json:
              schema:
                type: string
                items:
                  $ref: '#/components/schemas/Error'
        '403':
          description: The requester is not authorized to perform this action.
          content:
            application/json:
              schema:
                type: string
                items:
                  $ref: '#/components/schemas/Error'
        '500':
          description: An unexpected error occurred.
          content:
            application/json:
              schema:
                type: string
                items:
                  $ref: '#/components/schemas/Error'
      parameters:
        - name: object_id
          in: path
          required: true
          schema:
            type: string
          description: An `id` of a `DrsObject`.
        - name: access_id
          in: path
          required: true
          schema:
            type: string
          description: An `access_id` from the `access_methods` list of a `DrsObject`.
      tags:
        - DATAHUB
      security:
        - BEARER: []
  /ga4gh/htsget/v1.4.1/reads/service-info:
    get:
      tags:
        - DATAHUB
      summary: Get reads service info
      description: Get metadata about this service's Reads API.
      responses:
        '200':
          description: Successfully retrieved reads service info.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HtsgetReadsServiceInfo'
        '500':
          '$ref': '#/components/responses/5xxServerError'

  /ga4gh/htsget/v1.4.1/reads/{id}:
    get:
      tags:
        - DATAHUB
      summary: Get alignment (reads) file download ticket
      description: |
                Gets an htsget ticket containing URLs that will enable the
                transfer of a requested alignment file.
      parameters:
        - $ref: '#/components/parameters/idPathParam'
        - $ref: '#/components/parameters/readsFormatParam'
        - $ref: '#/components/parameters/classParam'
        - $ref: '#/components/parameters/referenceNameParam'
        - $ref: '#/components/parameters/startParam'
        - $ref: '#/components/parameters/endParam'
        - $ref: '#/components/parameters/readsFieldsParam'
        - $ref: '#/components/parameters/readsTagsParam'
        - $ref: '#/components/parameters/readsNoTagsParam'
      responses:
        '200':
          description: Successfully retrieved htsget ticket.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HtsgetReadsTicket'
        '400':
          $ref: '#/components/responses/400BadRequestError'
        '404':
          $ref: '#/components/responses/404NotFoundError'
        '500':
          $ref: '#/components/responses/5xxServerError'

    post:
      tags:
        - DATAHUB
      summary: Get alignment (reads) file download ticket
      description: |
                Gets an htsget ticket containing URLs that will enable the
                transfer of a requested alignment file. Compared to the
                equivalent `GET` endpoint, this `POST` endpoint allows more
                complex genomic region requests via the `regions` parameter.
      parameters:
        - $ref: '#/components/parameters/idPathParam'
      requestBody:
        $ref: '#/components/requestBodies/ReadsRequestBody'
      responses:
        '200':
          description: Successfully retrieved htsget ticket.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HtsgetReadsTicket'
        '400':
          $ref: '#/components/responses/400BadRequestError'
        '404':
          $ref: '#/components/responses/404NotFoundError'
        '500':
          $ref: '#/components/responses/5xxServerError'

  /ga4gh/htsget/v1.4.1/reads/data/{id}:
    get:
      tags:
        - DATAHUB
      summary: Stream alignment file part
      description: |
                Stream a single file part of a requested alignment file. Streams
                requested region(s), fields, and tags.

                NOTE: This endpoint, while public, should not be requested as an
                initial request. Rather, the ticket endpoint `/reads/{id}` will
                yield `URLs` to the `/reads/data/{id}` endpoint.
      parameters:
        - $ref: '#/components/parameters/idPathParam'
        - $ref: '#/components/parameters/readsFormatParam'
        - $ref: '#/components/parameters/referenceNameParam'
        - $ref: '#/components/parameters/startParam'
        - $ref: '#/components/parameters/endParam'
        - $ref: '#/components/parameters/readsFieldsParam'
        - $ref: '#/components/parameters/readsTagsParam'
        - $ref: '#/components/parameters/readsNoTagsParam'
        - $ref: '#/components/parameters/htsgetBlockClassHeaderParam'
        - $ref: '#/components/parameters/htsgetCurrentBlockHeaderParam'
        - $ref: '#/components/parameters/htsgetTotalBlocksHeaderParam'
      responses:
        '200':
          description: Successfully streamed file part of a large genomic alignment file.
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        '400':
          $ref: '#/components/responses/400BadRequestError'
        '404':
          $ref: '#/components/responses/404NotFoundError'
        '500':
          $ref: '#/components/responses/5xxServerError'

  /ga4gh/htsget/v1.4.1/variants/service-info:
    get:
      tags:
        - DATAHUB
      summary: Get variants service info
      description: Get metadata about this service's Variants API.
      responses:
        '200':
          description: Successfully retrieved variants service info.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HtsgetVariantsServiceInfo'
        '500':
          $ref: '#/components/responses/5xxServerError'

  /ga4gh/htsget/v1.4.1/variants/{id}:
    get:
      tags:
        - DATAHUB
      summary: Get variant file download ticket
      description: |
                Gets an htsget ticket containing URLs that will enable the
                transfer of a requested variant file.
      parameters:
        - $ref: '#/components/parameters/idPathParam'
        - $ref: '#/components/parameters/variantsFormatParam'
        - $ref: '#/components/parameters/classParam'
        - $ref: '#/components/parameters/referenceNameParam'
        - $ref: '#/components/parameters/startParam'
        - $ref: '#/components/parameters/endParam'
      responses:
        '200':
          description: Successfully retrieved htsget ticket.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HtsgetVariantsTicket'
        '400':
          $ref: '#/components/responses/400BadRequestError'
        '404':
          $ref: '#/components/responses/404NotFoundError'
        '500':
          $ref: '#/components/responses/5xxServerError'

  /ga4gh/htsget/v1.4.1/variants/data/{id}:
    get:
      tags:
        - DATAHUB
      summary: Stream variant file part
      description: |
                Stream a single file part of a requested variant file. Streams
                requested region(s).

                NOTE: This endpoint, while public, should not be requested as an
                initial request. Rather, the ticket endpoint `/variants/{id}`
                will yields `URLs` to the `/variants/data/{id}` endpoint.
      parameters:
        - $ref: '#/components/parameters/idPathParam'
        - $ref: '#/components/parameters/variantsFormatParam'
        - $ref: '#/components/parameters/referenceNameParam'
        - $ref: '#/components/parameters/startParam'
        - $ref: '#/components/parameters/endParam'
        - $ref: '#/components/parameters/htsgetBlockClassHeaderParam'
        - $ref: '#/components/parameters/htsgetCurrentBlockHeaderParam'
        - $ref: '#/components/parameters/htsgetTotalBlocksHeaderParam'
      responses:
        '200':
          description: Successfully streamed file part of a large genomic variant file.
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        '400':
          $ref: '#/components/responses/400BadRequestError'
        '404':
          $ref: '#/components/responses/404NotFoundError'
        '500':
          $ref: '#/components/responses/5xxServerError'

  /ga4gh/htsget/v1.4.1/file-bytes:
    get:
      tags:
        - DATAHUB
      summary: Stream bytes of a local file
      description: |
                Streams a single file part of a requested genomic file (reads or variants).
                This endpoint performs no region filtering or field/tag modification,
                rather it streams a file part by simple byte positions.
      parameters:
        - $ref: '#/components/parameters/htsgetFilePathHeaderParam'
        - $ref: '#/components/parameters/rangeHeaderParam'
      responses:
        '200':
          description:
            Successfully streamed file part of a large genomic file.
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        '400':
          $ref: '#/components/responses/400BadRequestError'
        '404':
          $ref: '#/components/responses/404NotFoundError'
        '500':
          $ref: '#/components/responses/5xxServerError'

components:
  parameters:
    limit:
      name: limit
      in: query
      description: Amount of records to return in a given page.
      schema:
        type: integer
        format: int32
        default: 1000
    offset:
      name: offset
      in: query
      description: Start index of paging. Pagination results can be based on numbers
        or other values chosen by the registry implementor (for example, SHA
        values). If this exceeds the current result set, return an empty set.  If
        not specified in the request, this will start at the beginning of the
        results.
      schema:
        type: string
    idPathParam:
      in: path
      name: id
      description: Read or variant object identifier.
      required: true
      schema:
        type: string
    readsFormatParam:
      in: query
      name: format
      description: Desired read file format.
      example: BAM
      required: false
      schema:
        $ref: '#/components/schemas/ReadsFormats'
    variantsFormatParam:
      in: query
      name: format
      description: Desired variant file format
      example: VCF
      required: false
      schema:
        type: string
        enum: [VCF]
        default: VCF
    classParam:
      in: query
      name: class
      description: Request different classes of data. By default, such as when class is not specified, the response will represent a complete read or variant data stream, encompassing SAM/CRAM/VCF headers, body data records, and EOF marker.
      example: header
      required: false
      schema:
        type: string
        enum: [header]
    referenceNameParam:
      in: query
      name: referenceName
      required: false
      schema:
        $ref: '#/components/schemas/ReferenceName'
    startParam:
      in: query
      name: start
      required: false
      schema:
        $ref: '#/components/schemas/Start'
    endParam:
      in: query
      name: end
      required: false
      schema:
        $ref: '#/components/schemas/End'
    readsFieldsParam:
      in: query
      name: fields
      description: A comma-separated list of SAM fields to include. By default, such as when fields is not specified, all fields will be included.
      example: QNAME,RNAME
      required: false
      schema:
        $ref: '#/components/schemas/ReadsFields'

    readsTagsParam:
      in: query
      name: tags
      description: A comma-separated list of tags to include. By default, i.e., when tags is not specified, all tags will be included.
      example: MD,NM
      required: false
      schema:
        $ref: '#/components/schemas/ReadsTags'
    readsNoTagsParam:
      in: query
      name: notags
      description: A comma-separated list of tags to exclude. By default, such as when notags is not specified, no tags will be excluded.
      example: OQ,HI
      required: false
      schema:
        $ref: '#/components/schemas/ReadsNoTags'
    htsgetBlockClassHeaderParam:
      in: header
      name: HtsgetBlockClass
      schema:
        $ref: '#/components/schemas/HtsgetBlockClass'
    htsgetCurrentBlockHeaderParam:
      in: header
      name: HtsgetCurrentBlock
      schema:
        $ref: '#/components/schemas/HtsgetCurrentBlock'
    htsgetTotalBlocksHeaderParam:
      in: header
      name: HtsgetTotalBlocks
      schema:
        $ref: '#/components/schemas/HtsgetTotalBlocks'
    htsgetFilePathHeaderParam:
      in: header
      name: HtsgetFilePath
      schema:
        $ref: '#/components/schemas/HtsgetFilePath'
    rangeHeaderParam:
      in: header
      name: Range
      schema:
        $ref: '#/components/schemas/Range'
  securitySchemes:
    BEARER:
      type: apiKey
      name: Authorization
      in: header
  schemas:
    WorkflowMeta:
      type: object
      properties:
        inputs:
          type: string
          description: The input json of the workflow.
        call_graph:
          type: string
          description: The call graph of the workflow.
      description: The meta data of the workflow after successful validation.
    DefaultWorkflowEngineParameter:
      type: object
      properties:
        name:
          type: string
          description: The name of the parameter.
        type:
          type: string
          description: Describes the type of the parameter, e.g. float.
        default_value:
          type: string
          description: The stringified version of the default parameter. e.g. "2.45".
      description: >-
        A message that allows one to describe default parameters for a workflow engine.
    Log:
      type: object
      properties:
        name:
          type: string
          description: The task or workflow name.
        cmd:
          type: array
          items:
            type: string
          description: The command line that was executed.
        start_time:
          type: string
          description: When the command started executing, in ISO 8601 format "%Y-%m-%dT%H:%M:%SZ".
        end_time:
          type: string
          description: When the command stopped executing (completed, failed, or cancelled), in ISO 8601 format "%Y-%m-%dT%H:%M:%SZ".
        stdout:
          type: string
          description: >-
            A URL to retrieve standard output logs of the workflow run or
            task. This URL may change between status requests, or may
            not be available until the task or workflow has finished
            execution. Should be available using the same credentials
            used to access the WES endpoint.
        stderr:
          type: string
          description: >-
            A URL to retrieve standard error logs of the workflow run or
            task. This URL may change between status requests, or may
            not be available until the task or workflow has finished
            execution. Should be available using the same credentials
            used to access the WES endpoint.
        exit_code:
          type: integer
          format: int32
          description: Exit code of the program.
      description: Log and other info.
    State:
      type: string
      enum:
        - UNKNOWN
        - QUEUED
        - INITIALIZING
        - RUNNING
        - PAUSED
        - COMPLETE
        - EXECUTOR_ERROR
        - SYSTEM_ERROR
        - CANCELED
        - CANCELING
      default: UNKNOWN
      description: >-
        - UNKNOWN: The state of the task is unknown.
        This provides a safe default for messages where this field is missing,
        for example, so that a missing field does not accidentally imply that
        the state is QUEUED.


        - QUEUED: The task is queued.


        - INITIALIZING: The task has been assigned to a worker and is currently preparing to run.
          For example, the worker may be turning on, downloading input files, etc.


        - RUNNING: The task is running. Input files are downloaded and the first Executor
        has been started.


        - PAUSED: The task is paused.
          An implementation may have the ability to pause a task, but this is not required.


        - COMPLETE: The task has completed running. Executors have exited without error
          and output files have been successfully uploaded.


        - EXECUTOR_ERROR: The task encountered an error in one of the Executor processes. Generally,
          this means that an Executor exited with a non-zero exit code.


        - SYSTEM_ERROR: The task was stopped due to a system error, but not from an Executor,
          for example an upload failed due to network issues, the worker's ran out
          of disk space, etc.


        - CANCELED: The task was canceled by the user.


        - CANCELING: The task was canceled by the user, and is in the process of stopping.
    RunListResponse:
      type: object
      properties:
        runs:
          type: array
          items:
            $ref: '#/components/schemas/RunStatus'
          description: >-
            A list of workflow runs that the service  has executed or is executing.
            The list is filtered to only include runs that the caller has permission to see.
        next_page_token:
          type: string
          description: >-
            A token which may be supplied as `page_token` in workflow run list request to get the next page
            of results. An empty string indicates there are no more items to return.
      description: The service will return a RunListResponse when receiving a successful RunListRequest.
    RunExpendedListResponse:
      type: object
      properties:
        runs:
          type: array
          items:
            $ref: '#/components/schemas/RunExpendedStatus'
          description: >-
            A list of workflow runs that the service  has executed or is executing.
            The list is filtered to only include runs that the caller has permission to see.
        next_page_token:
          type: string
          description: >-
            A token which may be supplied as `page_token` in workflow run list request to get the next page
            of results. An empty string indicates there are no more items to return.
      description: The service will return a RunExpendedListResponse when receiving a successful RunExpendedListRequest.
    RunLog:
      type: object
      properties:
        run_id:
          type: string
          description: Workflow run ID.
        request:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/RunRequest'
          description: The original request message used to initiate this execution.
        state:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/State'
          description: The state of the run e.g. RUNNING (see State).
        run_log:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/Log'
          description: The logs, and other key info like timing and exit code, for the overall run of this workflow.
        task_logs:
          type: array
          items:
            $ref: '#/components/schemas/Log'
          description: The logs, and other key info like timing and exit code, for each step in the workflow run.
        outputs:
          type: object
          description: The outputs from the workflow run.
    RunRequest:
      type: object
      properties:
        workflow_params:
          type: object
          description: |-
            REQUIRED
            The workflow run parameterizations (JSON encoded), including input and output file locations.
        workflow_type:
          type: string
          description: |-
            REQUIRED
            The workflow descriptor type, must be "CWL" or "WDL" currently (or another alternative supported by this WES instance).
        workflow_type_version:
          type: string
          description: |-
            REQUIRED
            The workflow descriptor type version, must be one supported by this WES instance.
        tags:
          type: object
          additionalProperties:
            type: string
          description: |-
            OPTIONAL
            A key-value map of arbitrary metadata outside the scope of `workflow_params` but useful to track with this run request.
        workflow_engine_parameters:
          type: object
          additionalProperties:
            type: string
          description: >-
            OPTIONAL

            Additional parameters can be sent to the workflow engine using this field. Default values
            for these parameters can be obtained using the ServiceInfo endpoint.
        workflow_url:
          type: string
          description: >-
            REQUIRED

            The workflow CWL or WDL document.
            When `workflow_attachments` is used to attach files, the `workflow_url` may be a relative path
            to one of the attachments.
      description: |-
        To execute a workflow, send a run request including all the details needed to begin downloading
        and executing a given workflow.
    RunId:
      type: object
      properties:
        run_id:
          type: string
          description: workflow run ID
    RunStatus:
      type: object
      required:
        - run_id
      properties:
        run_id:
          type: string
        state:
          $ref: '#/components/schemas/State'
      description: Small description of a workflow run, returned by server during listing.
    RunExpendedStatus:
      type: object
      required:
        - run_id
        - state
      properties:
        run_id:
          type: string
        state:
          $ref: '#/components/schemas/State'
        #label:
        #  type: array
        name:
          type: string
        submitted_time:
          type: string
          description: When the command stopped executing (completed, failed, or cancelled), in ISO 8601 format "%Y-%m-%dT%H:%M:%SZ".
        start_time:
          type: string
          description: When the command stopped executing (completed, failed, or cancelled), in ISO 8601 format "%Y-%m-%dT%H:%M:%SZ".
        completed_time:
          type: string
          description: When the command stopped executing (completed, failed, or cancelled), in ISO 8601 format "%Y-%m-%dT%H:%M:%SZ".
        owner:
          type: string
          description: The owner of the workflow.
      description: Detailed description of a workflow run, returned by server during listing.

    WorkflowTypeVersion:
      type: object
      properties:
        workflow_type_version:
          type: array
          items:
            type: string
          description: |-
            An array of one or more acceptable types for the `workflow_type`.

      description: Available workflow types supported by a given instance of the service.
    ErrorResponse:
      description: >-
        An object that can optionally include information about the error.
      type: object
      properties:
        msg:
          type: string
          description: A detailed error message.
        status_code:
          type: integer
          description: The integer representing the HTTP status code (e.g. 200, 404).
    Checksum:
      type: object
      required:
        - checksum
        - type
      properties:
        checksum:
          type: string
          description: "The hex-string encoded checksum for the data. "
        type:
          type: string
          description: >-
            The digest method used to create the checksum.

            The value (e.g. `sha-256`) SHOULD be listed as `Hash Name String` in the https://github.com/ga4gh-discovery/ga4gh-checksum/blob/master/hash-alg.csv[GA4GH Checksum Hash Algorithm Registry].

            Other values MAY be used, as long as implementors are aware of the issues discussed in https://tools.ietf.org/html/rfc6920#section-9.4[RFC6920].

            GA4GH may provide more explicit guidance for use of non-IANA-registered algorithms in the future.
    ToolFile:
      type: object
      properties:
        path:
          type: string
          description: Relative path of the file. A descriptor's path can be used with
            the GA4GH .../{type}/descriptor/{relative_path} endpoint.
        file_type:
          type: string
          enum:
            - TEST_FILE
            - PRIMARY_DESCRIPTOR
            - SECONDARY_DESCRIPTOR
            - CONTAINERFILE
            - OTHER
    ToolClass:
      type: object
      description: Describes a class (type) of tool allowing us to categorize
        workflows, tasks, and maybe even other entities (such as services)
        separately.
      properties:
        id:
          type: string
          description: The unique identifier for the class.
        name:
          type: string
          description: A short friendly name for the class.
        description:
          type: string
          description: A longer explanation of what this class is and what it can
            accomplish.
    Tool:
      type: object
      description: A tool (or described tool) is defined as a tuple of a descriptor
        file (which potentially consists of multiple files), a set of container
        images, and a set of instructions for creating those images.
      required:
        - url
        - id
        - organization
        - toolclass
        - versions
      properties:
        url:
          type: string
          example: http://agora.broadinstitute.org/tools/123456
          description: The URL for this tool in this registry.
        id:
          type: string
          example: 123456
          description: A unique identifier of the tool, scoped to this registry.
        aliases:
          type: array
          items:
            type: string
            example:
              - 630d31c3-381e-488d-b639-ce5d047a0142
              - dockstore.org:630d31c3-381e-488d-b639-ce5d047a0142
              - bio.tools:630d31c3-381e-488d-b639-ce5d047a0142
          description: >-
            Support for this parameter is optional for tool registries that
            support aliases.

            A list of strings that can be used to identify this tool which could be  straight up URLs.

            This can be used to expose alternative ids (such as GUIDs) for a tool

            for registries. Can be used to match tools across registries.
        organization:
          type: string
          description: The organization that published the image.
        name:
          type: string
          description: The name of the tool.
        toolclass:
          $ref: "#/components/schemas/ToolClass"
        description:
          type: string
          description: The description of the tool.
        meta_version:
          type: string
          description: The version of this tool in the registry. Iterates when fields like
            the description, author, etc. are updated.
        has_checker:
          type: boolean
          description: Whether this tool has a checker tool associated with it.
        checker_url:
          type: string
          description: Optional url to the checker tool that will exit successfully if
            this tool produced the expected result given test data.
        versions:
          description: A list of versions for this tool.
          type: array
          items:
            $ref: "#/components/schemas/ToolVersion"
    ToolVersion:
      type: object
      description: A tool version describes a particular iteration of a tool as
        described by a reference to a specific image and/or documents.
      required:
        - url
        - id
      properties:
        author:
          type: array
          items:
            type: string
          description: Contact information for the author of this version of the tool in
            the registry. (More complex authorship information is handled by the
            descriptor).
        name:
          type: string
          description: The name of the version.
        url:
          type: string
          description: The URL for this tool version in this registry.
          example: http://agora.broadinstitute.org/tools/123456/versions/1
        id:
          type: string
          description: An identifier of the version of this tool for this particular tool
            registry.
          example: v1
        is_production:
          type: boolean
          description: This version of a tool is guaranteed to not change over time (for
            example, a  tool built from a tag in git as opposed to a branch). A
            production quality tool is required to have a checksum.
        images:
          description: All known docker images (and versions/hashes) used by this tool. If
            the tool has to evaluate any of the docker images strings at
            runtime, those ones cannot be reported here.
          type: array
          items:
            $ref: "#/components/schemas/ImageData"
        descriptor_type:
          type: array
          description: The type (or types) of descriptors available.
          items:
            $ref: "#/components/schemas/DescriptorType"
        containerfile:
          type: boolean
          description: Reports if this tool has a containerfile available. (For
            Docker-based tools, this would indicate the presence of a
            Dockerfile)
        meta_version:
          type: string
          description: The version of this tool version in the registry. Iterates when
            fields like the description, author, etc. are updated.
        verified:
          type: boolean
          description: Reports whether this tool has been verified by a specific
            organization or individual.
        verified_source:
          type: array
          items:
            type: string
          description: Source of metadata that can support a verified tool, such as an
            email or URL.
        signed:
          type: boolean
          description: Reports whether this version of the tool has been signed.
        included_apps:
          description: An array of IDs for the applications that are stored inside this
            tool.
          example:
            - https://bio.tools/tool/mytum.de/SNAP2/1
            - https://bio.tools/bioexcel_seqqc
          type: array
          items:
            type: string
    ImageData:
      type: object
      description: Describes one container image.
      properties:
        registry_host:
          type: string
          description: A docker registry or a URL to a Singularity registry. Used along
            with image_name to locate a specific image.
          example:
            - registry.hub.docker.com
        image_name:
          type: string
          description: Used in conjunction with a registry_url if provided to locate images.
          example:
            - quay.io/seqware/seqware_full/1.1
            - ubuntu:latest
        size:
          type: integer
          description: Size of the container in bytes.
        updated:
          type: string
          description: Last time the container was updated.
        checksum:
          type: array
          items:
            $ref: "#/components/schemas/Checksum"
          description: A production (immutable) tool version is required to have a
            hashcode. Not required otherwise, but might be useful to detect
            changes.  This exposes the hashcode for specific image versions to
            verify that the container version pulled is actually the version
            that was indexed by the registry.
          example:
            - checksum: 77af4d6b9913e693e8d0b4b294fa62ade6054e6b2f1ffb617ac955dd63fb0182
              type: sha256
        image_type:
          $ref: "#/components/schemas/ImageType"
    ImageType:
      type: string
      description: Indicates what kind of container is this image is.
      enum:
        - Docker
        - Singularity
        - Conda
    DescriptorType:
      type: string
      description: The type of descriptor that represents this version of the tool
        (e.g. CWL, WDL, NFL, or GALAXY). Note that these files can also include
        associated Docker/container files  and test parameters that further
        describe a version of a tool.
      enum:
        - CWL
        - WDL
        - NFL
        - GALAXY
    FileWrapper:
      type: object
      description: >
        A file provides content for one of

        - A tool descriptor is a metadata document that describes one or more tools.

        - A tool document that describes how to test with one or more sample test

        JSON.

        - A containerfile is a document that describes how to build a particular

        container image. Examples include Dockerfiles for creating Docker images

        and Singularity recipes for Singularity images.
      properties:
        content:
          type: string
          description: The content of the file itself. At least one URL or content is required.
        checksum:
          type: array
          items:
            $ref: "#/components/schemas/Checksum"
          description: "A production (immutable) tool version is required to have a
            hashcode. Not required otherwise, but might be useful to detect
            changes. "
          example:
            - checksum: ea2a5db69bd20a42976838790bc29294df3af02b
              type: sha1
        url:
          type: string
          description: Optional url to the underlying content, should include version
            information, and can include a git hash.  Note that this URL should
            resolve to the raw unwrapped content that would otherwise be
            available in content. One of url or content is required.
          example:
            descriptorfile:
              url: https://raw.githubusercontent.com/ICGC-TCGA-PanCancer/pcawg_delly_workflow/ea2a5db69bd20a42976838790bc29294df3af02b/delly_docker/Delly.cwl
            containerfile:
              url: https://raw.githubusercontent.com/ICGC-TCGA-PanCancer/pcawg_delly_workflow/c83478829802b4d36374870843821abe1b625a71/delly_docker/Dockerfile
    Error:
      type: object
      required:
        - code
      properties:
        code:
          type: integer
          format: int32
          default: 500
        message:
          type: string
          default: Internal Server Error
    ObjectExpendedListResponse:
      type: object
      properties:
        runs:
          type: array
          items:
            $ref: '#/components/schemas/ObjectExpendedStatus'
          description: >-
            A list of sample files that the DataHub has stored or registered.
            The list is filtered to only include objects that the caller has permission to see.
        next_page_token:
          type: string
          description: >-
            A token which may be supplied as `page_token` in DataHub list request to get the next page
            of results.  An empty string indicates there are no more items to return.
      description: The service will return a ObjectExpendedListResponse when receiving a successful ObjectExpendedListRequest.
    ObjectExpendedStatus:
      type: object
      required:
        - object_id
        - object_name
        - object_owner
        - object_createddate
      properties:
        object_id:
          type: string
        state:
          $ref: '#/components/schemas/State'
        label:
          type: array
          items:
            type: string
          description: an array of labels
        object_owner:
          type: string
          description: The owner of the file
        object_createddate:
          type: string
          description: When the command stopped executing (completed, failed, or cancelled), in ISO 8601 format "%Y-%m-%dT%H:%M:%SZ"
      description: Detailed description of a file, returned by server during listing

    DrsObject:
      type: object
      required: ['id', 'self_uri', 'size', 'created_time', 'checksums']
      properties:
        id:
          type: string
          description: |-
            An identifier unique to this `DrsObject`.
        name:
          type: string
          description: |-
            A string that can be used to name a `DrsObject`.
            This string is made up of uppercase and lowercase letters, decimal digits, hypen, period, and underscore [A-Za-z0-9.-_]. See http://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap03.html#tag_03_282[portable filenames].
        self_uri:
          type: string
          description: |-
            A drs:// hostname-based URI, as defined in the DRS documentation, that tells clients how to access this object.
            The intent of this field is to make DRS objects self-contained, and therefore easier for clients to store and pass around. For example, if you arrive at this DRS JSON by resolving a compact identifier-based DRS URI, the `self_uri` presents you with a hostname and properly encoded DRS ID for use in subsequent `access` endpoint calls.
          example:
            drs://drs.example.org/314159
        size:
          type: integer
          format: int64
          description: |-
            For blobs, the blob size in bytes.
            For bundles, the cumulative size, in bytes, of items in the `contents` field.
        created_time:
          type: string
          format: date-time
          description: |-
            Timestamp of content creation in RFC3339.
            (This is the creation time of the underlying content, not of the JSON object.)
        updated_time:
          type: string
          format: date-time
          description: >-
            Timestamp of content update in RFC3339, identical to `created_time` in systems
            that do not support updates.
            (This is the update time of the underlying content, not of the JSON object.)
        version:
          type: string
          description: >-
            A string representing a version.

            (Some systems may use checksum, a RFC3339 timestamp, or an incrementing version number.)
        mime_type:
          type: string
          description: |-
            A string providing the mime-type of the `DrsObject`.
          example:
            application/json
        checksums:
          type: array
          minItems: 1
          items:
            $ref: '#/components/schemas/Checksum'
          description: >-
            The checksum of the `DrsObject`. At least one checksum must be provided.

            For blobs, the checksum is computed over the bytes in the blob.


            For bundles, the checksum is computed over a sorted concatenation of the
            checksums of its top-level contained objects (not recursive, names not included).
            The list of checksums is sorted alphabetically (hex-code) before concatenation
            and a further checksum is performed on the concatenated checksum value.


            For example, if a bundle contains blobs with the following checksums:

            md5(blob1) = 72794b6d

            md5(blob2) = 5e089d29


            Then the checksum of the bundle is:

            md5( concat( sort( md5(blob1), md5(blob2) ) ) )

            = md5( concat( sort( 72794b6d, 5e089d29 ) ) )

            = md5( concat( 5e089d29, 72794b6d ) )

            = md5( 5e089d2972794b6d )

            = f7a29a04
        access_methods:
          type: array
          minItems: 1
          items:
            $ref: '#/components/schemas/AccessMethod'
          description: |-
            The list of access methods that can be used to fetch the `DrsObject`.
            Required for single blobs; optional for bundles.
        contents:
          type: array
          description: >-
            If not set, this `DrsObject` is a single blob.

            If set, this `DrsObject` is a bundle containing the listed `ContentsObject` s (some of which may be further nested).
          items:
            $ref: '#/components/schemas/ContentsObject'
        description:
          type: string
          description: |-
            A human readable description of the `DrsObject`.
        aliases:
          type: array
          items:
            type: string
          description: >-
            A list of strings that can be used to find other metadata
            about this `DrsObject` from external metadata sources. These
            aliases can be used to represent secondary
            accession numbers or external GUIDs.
    AccessURL:
      type: object
      required: ['url']
      description: >-
        An `AccessURL` that can be used to fetch the actual object bytes.
      properties:
        url:
          type: string
          description: A fully resolvable URL that can be used to fetch the actual object bytes.
        headers:
          type: array
          items:
            type: string
          description: >-
            An optional list of headers to include in the HTTP request to `url`.
            These headers can be used to provide auth tokens required to fetch the object bytes.
          example:
            Authorization: Basic Z2E0Z2g6ZHJz
    AccessMethod:
      type: object
      required:
        - type
      properties:
        type:
          type: string
          enum:
          - s3
          - gs
          - ftp
          - gsiftp
          - globus
          - htsget
          - https
          - file
          description: >-
            Type of the access method.
        access_url:
          $ref: '#/components/schemas/AccessURL'
        access_id:
          type: string
          description: >-
            An arbitrary string to be passed to the `/access` method to get an `AccessURL`.
            This string must be unique within the scope of a single object.
            Note that at least one of `access_url` and `access_id` must be provided.
        region:
          type: string
          description: >-
            Name of the region in the cloud service provider that the object belongs to.
          example:
            us-east-1
    ContentsObject:
      type: object
      properties:
        name:
          type: string
          description: >-
            A name declared by the bundle author that must be
            used when materialising this object,
            overriding any name directly associated with the object itself.
            The name must be unique with the containing bundle.
            This string is made up of uppercase and lowercase letters, decimal digits, hypen, period, and underscore [A-Za-z0-9.-_]. See http://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap03.html#tag_03_282[portable filenames].
        id:
          type: string
          description: >-
            A DRS identifier of a `DrsObject` (either a single blob or a nested bundle).
            If this ContentsObject is an object within a nested bundle, then the id is
            optional. Otherwise, the id is required.
        drs_uri:
          type: array
          description: >-
            A list of full DRS identifier URI paths
            that may be used to obtain the object.
            These URIs may be external to this DRS instance.
          example:
            drs://drs.example.org/314159
          items:
            type: string
        contents:
          type: array
          description: >-
            If this ContentsObject describes a nested bundle and the caller specified
            "?expand=true" on the request, then this contents array must be present and
            describe the objects within the nested bundle.
          items:
            $ref: '#/components/schemas/ContentsObject'

      required:
        - name
    # HTSGET:LOW-LEVEL, REUSABLE SCHEMAS
    ReadsFormats:
      type: string
      description: Acceptable file formats for genomic alignment files.
      enum: [BAM, CRAM]
      example: BAM
    ReadsFields:
      type: array
      description: Acceptable requested fields for genomic alignment files.
      items:
        type: string
        enum: [QNAME, FLAG, RNAME, POS, MAPQ, CIGAR, RNEXT, PNEXT, TLEN, SEQ, QUAL]
      example: [QNAME, RNAME]
    ReadsTags:
      type: array
      description: Tags to include in returned alignment file.
      items:
        type: string
      example: [MD, NM]
    ReadsNoTags:
      type: array
      description: Tags to exclude from returned alignment file.
      items:
        type: string
      example: [OQ, HI]

    #HTSGET: GENOMIC INTERVAL, REUSABLE SCHEMAS
    ReferenceName:
      type: string
      description: Reference sequence name
      example: chr1
    Start:
      type: integer
      description: The start position of the range on the reference, 0-based, inclusive.
      format: int64
      minimum: 0
      example: 12312
    End:
      type: integer
      description: The end position of the range on the reference, 0-based, exclusive.
      format: int64
      example: 99999
    Region:
      type: object
      description: Represents a genomic interval
      properties:
        referenceName:
          $ref: '#/components/schemas/ReferenceName'
        start:
          $ref: '#/components/schemas/Start'
        end:
          $ref: '#/components/schemas/End'
      required:
        - referenceName
    Regions:
      type: array
      description: A listing of genomic intervals.
      items:
        $ref: '#/components/schemas/Region'

    # HTSGET: SERVICE-INFO SCHEMAS
    ServiceInfo:
      '$ref': https://raw.githubusercontent.com/ga4gh-discovery/ga4gh-service-info/v1.0.0/service-info.yaml#/components/schemas/Service
    HtsgetServiceInfoExtension:
      type: object
      description: Htsget-specific properties integrated into base service info data model.
      properties:
        datatype:
          type: string
          description: Indicates the htsget API (reads or variants) that this service info endpoint refers to.
          enum: [reads, variants]
        formats:
          type: array
          description: |
            The file format(s) that the endpoint supports. Indicates
            what values can be submitted via the `?format=` query
            parameter
          items:
            type: string
            enum: [BAM, CRAM, VCF, BCF]
        fieldsParameterEffective:
          type: boolean
          description: |
            If true, submitting the `fields` query parameter will
            yield custom field inclusion/exclusion according to htsget
            protocol.
          example: true
        tagsParametersEffective:
          type: boolean
          description: |
            If true, submitting the `tags` and/or `notags` query
            parameters will yield custom tag inclusion/exclusion
            according to htsget protocol.
          example: true
    HtsgetServiceInfo:
      allOf:
        - '$ref': '#/components/schemas/ServiceInfo'
        - type: object
          properties:
            artifact:
              example: htsget
            version:
              example: 1.2.0
            htsget:
              '$ref': '#/components/schemas/HtsgetServiceInfoExtension'
          required:
            - htsget
    HtsgetReadsServiceInfo:
      allOf:
        - '$ref': '#/components/schemas/HtsgetServiceInfo'
    HtsgetVariantsServiceInfo:
      allOf:
        - '$ref': '#/components/schemas/HtsgetServiceInfo'
        - type: object
          properties:
            htsget:
              properties:
                datatype:
                  example: variants
                formats:
                  example: VCF

    # HTSGET: REQUEST BODY SCHEMAS
    ReadsRequestBody:
      type: object
      description: Specify desired file format, fields, tags, and regions from an alignment file.
      properties:
        format:
          $ref: '#/components/schemas/ReadsFormats'
        fields:
          $ref: '#/components/schemas/ReadsFields'
        tags:
          $ref: '#/components/schemas/ReadsTags'
        notags:
          $ref: '#/components/schemas/ReadsNoTags'
        regions:
          $ref: '#/components/schemas/Regions'

    # HTSGET TICKET SCHEMAS
    HtsgetBlockClass:
      type: string
      description: When supplied to the data transfer URL, indicates whether a header or body file part is to be returned.
      enum: [header, body]
      example: header
    HtsgetCurrentBlock:
      type: string
      description: "Indicates the file part's position within the overall downloaded file."
      example: "0"
    HtsgetTotalBlocks:
      type: string
      description: Indicates how many file parts the overall genomic file transfer has been broken into.
      example: "100"
    HtsgetFilePath:
      type: string
      description: Path to a local file that is to be streamed on simple byte indices.
      example: /data/reads/object00001.bam
    Range:
      type: string
      description: The start/end byte positions of the file to be streamed.
      example: bytes=0-500000
    HtsgetHeaders:
      type: object
      description: Headers that must be supplied in the request to a data transfer URL.
      properties:
        HtsgetBlockClass:
          $ref: '#/components/schemas/HtsgetBlockClass'
        HtsgetCurrentBlock:
          $ref: '#/components/schemas/HtsgetCurrentBlock'
        HtsgetTotalBlocks:
          $ref: '#/components/schemas/HtsgetTotalBlocks'
        HtsgetFilePath:
          $ref: '#/components/schemas/HtsgetFilePath'
        Range:
          $ref: '#/components/schemas/Range'
    HtsgetUrl:
      type: object
      description: A URL and associated headers that, when requested, perform transfer of a requested file.
      properties:
        url:
          type: string
          description: Data transfer URL
          example: https://htsget.ga4gh.org/reads/data/object00001?referenceName=chr1
        headers:
          $ref: '#/components/schemas/HtsgetHeaders'
        class:
          type: string
          description: Indicates whether the url is responsible for downloading the requested file header or body.
          enum: [header, body]
      required:
        - url
        - headers
    HtsgetTicket:
      type: object
      description: Container for the htsget ticket
      properties:
        htsget:
          type: object
          description: Contains htsget ticket attributes that will enable genomic file transfer.
          properties:
            format:
              type: string
              description: The format of the returned file
              enum: [BAM, CRAM, VCF, BCF]
            urls:
              type: array
              description: An array of URLs and headers that, when requested, will transfer individual file parts of a requested genomic file.
              items:
                $ref: '#/components/schemas/HtsgetUrl'
          required:
            - format
            - urls
      required:
        - htsget
    HtsgetReadsTicket:
      $ref: '#/components/schemas/HtsgetTicket'
    HtsgetVariantsTicket:
      allOf:
        - $ref: '#/components/schemas/HtsgetTicket'
        - type: object
          properties:
            format:
              example: VCF
            urls:
              items:
                allOf:
                  - $ref: '#/components/schemas/HtsgetUrl'
                  - type: object
                    properties:
                      url:
                        example: https://htsget.ga4gh.org/variants/data/00001
                      headers:
                        allOf:
                          - $ref: '#/components/schemas/HtsgetHeaders'
                          - type: object
                            properties:
                              FilePath:
                                example: "/data/variants/object00001.vcf"

    # HTSGET: ERROR SCHEMAS
    HTSGET_Error:
      type: object
      properties:
        htsget:
          type: object
          description: Error object container.
          properties:
            error:
              type: string
              description: Name/type of the error that occurred.
              example: ServerError
            message:
              type: string
              description: Message explaining why the error occurred.
              example: An unspecified server error occurred.
          required:
            - error
            - message
      required:
        - htsget
    BadRequestError:
      allOf:
        - $ref: '#/components/schemas/Error'
        - type: object
          properties:
            error:
              example: InvalidInput
            message:
              example: "'FOO' is not an acceptable field."
    NotFoundError:
      allOf:
        - $ref: '#/components/schemas/Error'
        - type: object
          properties:
            error:
              example: NotFound
            message:
              example: The requested resource could not be located.
  requestBodies:
    ReadsRequestBody:
      description: Specify desired file format, fields, tags, and regions from an alignment file.
      required: false
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ReadsRequestBody'

  responses:
    400BadRequestError:
      description: The request was not processed, as the request parameters did not adhere to the specification.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BadRequestError'
    404NotFoundError:
      description: The request was not processed, as the requested object was not found.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/NotFoundError'
    5xxServerError:
      description: Unspecified server error encountered.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

